name: Build and Release on all platforms
on:
  push:
    tags:
      - '*'
  workflow_dispatch: null
jobs:
  build:
    runs-on: '${{ matrix.os }}'
    strategy:
      matrix:
        os:
          - windows-latest
          - macos-latest
          - ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v3
      - name: Set up Python 3.10
        uses: actions/setup-python@v3
        with:
          python-version: '3.10'
      - name: Install SSH key
        uses: shimataro/ssh-key-action@v2.5.1
        with:
          key: '${{ secrets.DEPLOY_BLINK_DETECTION_BACKEND }}'
          name: id_rsa
          known_hosts: unnecessary
          if_key_exists: fail
      - name: Checkout submodules
        run: |
          git submodule update --init
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            pip install -r requirements_windows.txt
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            pip install -r requirements_mac.txt
          else
            pip install -r requirements_linux.txt
          fi
          pip install cx-freeze
          pip install ./submodules/eyeblink-detection
        shell: bash
      - name: Build with cx_Freeze
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            # Windows commands
            echo "Running Windows build"
            python3 setup.py bdist_msi
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            # MacOS commands
            echo "Running MacOS build"
            python3 setup.py bdist_dmg
          else
            # Linux commands
            echo "Running Linux build"
            python3 setup.py build 
            # create the folder structure for the deb package
            # all the files for the program will be in /opt/eyehealth, so easy handle of dependencies
            mkdir -p deb_build/opt/eyehealth 
            
            ls build
            
            # we copy the files from the build folder to the deb package folder before deb creation
            cp -R build/exe.linux-x86_64-3.10/* deb_build/opt/eyehealth

            # we change the permissions of the files and folders because files will keep permissions after packaging
            find deb_build/opt/eyehealth -type f -exec chmod 644 -- {} +
            find deb_build/opt/eyehealth -type d -exec chmod 755 -- {} +

            # we make the binary executable (not done by cxfreeze)
            chmod +x deb_build/opt/eyehealth/eyehealth

            # build the deb package with the official tool
            # dpkg-deb --build --root-owner-group deb_build eyehealth_${{  github.ref_name }}_all.deb
            dpkg-deb --build --root-owner-group deb_build eyehealth_2.0.0_all.deb

            ls
          fi
        shell: bash
      - name: Upload Artifact
        uses: actions/upload-artifact@v3
        with:
          name: '${{ matrix.os }}_build'
          path: |
            ${{ matrix.os == 'windows-latest' && 'dist/eyeblink_gui-2.0.0-win64.msi' }}
            ${{ matrix.os == 'macos-latest' && 'build/Eyeblink_GUI.dmg' }}
            ${{ matrix.os == 'ubuntu-latest' && 'eyehealth_2.0.0_all.deb' }}
  release:
    needs: build
    runs-on: ubuntu-latest
    steps:
      - name: Download all workflow run artifacts
        uses: actions/download-artifact@v3
          
      - name: Ls downloads
        run: |
          ls -R
      - name: Create Release
        uses: ncipollo/release-action@v1.12.0
        with:
          artifacts: >-
            ./windows-latest_build/dist/eyeblink_gui-2.0.0-win64.msi,
            ./macos-latest_build/build/Eyeblink_GUI.dmg,
            ./ubuntu-latest_build/eyehealth_2.0.0_all.deb
          token: '${{ secrets.GITHUB_TOKEN }}'
          name: 'Release ${{ github.ref }}'
          tag: '${{ github.ref_name }}'
          allowUpdates: true
          replacesArtifacts: false
          generateReleaseNotes : true